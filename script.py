# === IMPORTA√á√ÉO DE BIBLIOTECAS ===
import streamlit as st             # Para criar interface web interativa
import pandas as pd               # Para manipula√ß√£o de tabelas (DataFrames)
import plotly.express as px       # Para criar gr√°ficos interativos com visual moderno
from datetime import datetime     # Para registrar data e hora no relat√≥rio
import base64                     # Para converter imagem do selo em base64 e exibir no app

# === DEFINI√á√ÉO DOS DADOS DOS MATERIAIS ===
# Cada material tem: consumo padr√£o, unidade, densidade (se m¬≥), fator de emiss√£o de CO‚ÇÇ, percentual de desperd√≠cio, instru√ß√µes de reuso e descarte
materiais = {
    "Concreto": {
        "consumo": 0.05, "un": "m¬≥/m¬≤", "densidade": 2400, "co2": 0.15,
        "desperdicio": 0.12, "reuso": "Pode ser triturado", "descarte": "Descarte em ca√ßambas"
    },
    "Cimento": {
        "consumo": 15, "un": "kg/m¬≤", "co2": 0.85,
        "desperdicio": 0.10, "reuso": "Usar em argamassa", "descarte": "Evitar solo e √°gua"
    },
    "A√ßo": {
        "consumo": 20, "un": "kg/m¬≤", "co2": 1.80,
        "desperdicio": 0.07, "reuso": "100% recicl√°vel", "descarte": "Enviar para reciclagem"
    }
}

# === CONFIGURA√á√ÉO INICIAL DA P√ÅGINA STREAMLIT ===
st.set_page_config(page_title="An√°lise Preliminar", layout="centered")
st.title("‚ôªÔ∏è An√°lise Preliminar de Res√≠duos e CO‚ÇÇ")

# === ENTRADA DE DADOS PELO USU√ÅRIO ===
# Solicita ao usu√°rio a √°rea da obra em m¬≤
area = st.number_input("√Årea da obra (m¬≤):", min_value=1.0, value=100.0)

# Permite que o usu√°rio selecione os materiais a serem analisados
selecionados = st.multiselect("Materiais:", list(materiais.keys()))

# === VERIFICA SE ALGUM MATERIAL FOI SELECIONADO ===
if selecionados:
    st.subheader("üîß Personalize o consumo (ou use o padr√£o)")

    resultados = []  # Lista para armazenar os dados calculados

    # === LOOP PARA CADA MATERIAL SELECIONADO ===
    for mat in selecionados:
        info = materiais[mat]
        consumo_padrao = info["consumo"]
        un = info["un"]
        densidade = info.get("densidade", 1)

        # Permite ao usu√°rio ajustar o consumo manualmente
        valor = st.number_input(
            f"{mat} ({un}, padr√£o: {consumo_padrao})",
            min_value=0.0, value=float(consumo_padrao), key=mat
        )

        # C√°lculo do consumo total com base na √°rea
        consumo_total = valor * area

        # Convers√£o para kg se a unidade for m¬≥
        consumo_kg = consumo_total * densidade if un == "m¬≥/m¬≤" else consumo_total

        # C√°lculo do res√≠duo gerado com base no desperd√≠cio
        residuo = consumo_kg * info["desperdicio"]

        # C√°lculo da emiss√£o de CO‚ÇÇ associada ao res√≠duo
        co2_total = residuo * info["co2"]

        # Verifica se o consumo foi maior que o padr√£o
        excedeu = valor > consumo_padrao

        unidade_total = un.split("/")[0]  # Ex: "m¬≥", "kg"

        # Armazena todos os resultados em formato de dicion√°rio
        resultados.append({
            "Material": mat,
            "Consumo Total (un)": f"{consumo_total:,.2f} {unidade_total}",
            "Consumo (kg)": f"{consumo_kg:,.2f} kg",
            "Res√≠duo (kg)": f"{residuo:,.2f} kg",
            "CO‚ÇÇ (kg)": f"{co2_total:,.2f} kg",
            "Reutiliza√ß√£o": info["reuso"],
            "Descarte": info["descarte"],
            "Excedeu": excedeu,
            "CO2_ValorBruto": co2_total  # usado internamente para c√°lculo
        })

    # === CRIA√á√ÉO DO DATAFRAME COM OS RESULTADOS ===
    df = pd.DataFrame(resultados)

    # === EXIBI√á√ÉO DA TABELA NA TELA ===
    st.subheader("üìä Resultado com Unidades")
    st.dataframe(df[["Material", "Consumo Total (un)", "Consumo (kg)", "Res√≠duo (kg)", "CO‚ÇÇ (kg)", "Reutiliza√ß√£o", "Descarte"]])

    # === GR√ÅFICO DE RES√çDUO E CO‚ÇÇ ===
    st.subheader("üìà Gr√°fico de Res√≠duos e CO‚ÇÇ")

    # Prepara os dados para o gr√°fico em formato "long"
    df_plot = df[["Material", "Res√≠duo (kg)", "CO‚ÇÇ (kg)"]].copy()
    df_plot = df_plot.melt(id_vars="Material", var_name="variable", value_name="value")
    df_plot["value"] = df_plot["value"].str.replace(" kg", "").str.replace(",", "").astype(float)

    # Gera o gr√°fico de colunas agrupadas com tema escuro
    fig = px.bar(
        df_plot,
        x="Material",
        y="value",
        color="variable",
        barmode="group",
        template="plotly_dark",
        color_discrete_map={
            "Res√≠duo (kg)": "#87CEFA",  # azul claro
            "CO‚ÇÇ (kg)": "#0066CC"       # azul escuro
        }
    )

    # Ajusta r√≥tulos e estilo do gr√°fico
    fig.update_layout(
        yaxis_title=None,
        xaxis_title="Material",
        legend_title="variable",
        font=dict(size=14),
        plot_bgcolor="#111111",
        paper_bgcolor="#111111",
    )

    # Exibe o gr√°fico na aplica√ß√£o
    st.plotly_chart(fig, use_container_width=True)

    # === AVALIA√á√ÉO DO SELO VERDE ===
    st.subheader("üå± Crit√©rios do Selo Verde")

    total_co2 = df["CO2_ValorBruto"].sum()

    c1 = not df["Excedeu"].any()  # Nenhum material ultrapassou consumo padr√£o
    c2 = (total_co2 / area) <= 8  # CO‚ÇÇ por m¬≤ est√° abaixo de 8
    c3 = df["Reutiliza√ß√£o"].str.contains("reutil|recicl|usar", case=False).sum() / len(df) >= 0.7  # ‚â• 70% reaproveit√°veis

    # Se todos os crit√©rios forem atendidos, exibe selo verde com imagem
    if c1 and c2 and c3:
        st.success("‚úÖ Selo Verde Concedido!")
        try:
            with open("SJG.png", "rb") as img:
                img_base64 = base64.b64encode(img.read()).decode()
                st.markdown(f"""
                    <div style="text-align:center;">
                        <img src="data:image/png;base64,{img_base64}" width="140"/>
                        <p><strong>Selo Verde Concedido</strong></p>
                    </div>
                """, unsafe_allow_html=True)
        except:
            st.warning("‚ö† Imagem 'SJG.png' n√£o encontrada.")
    else:
        st.error("‚ùå Selo Verde N√ÉO Concedido")

    # Exibe quais crit√©rios foram ou n√£o cumpridos
    st.markdown("### ‚úÖ Avalia√ß√£o dos Crit√©rios:")
    st.markdown(f"- {'‚úÖ' if c1 else '‚ùå'} Nenhum material ultrapassou o consumo padr√£o")
    st.markdown(f"- {'‚úÖ' if c2 else '‚ùå'} CO‚ÇÇ por m¬≤ ‚â§ 8 kg (Atual: {total_co2 / area:.2f} kg)")
    st.markdown(f"- {'‚úÖ' if c3 else '‚ùå'} Pelo menos 70% dos materiais s√£o reaproveit√°veis")

    # === RELAT√ìRIO FINAL EM TXT PARA DOWNLOAD ===
    st.subheader("üìÑ Baixar Relat√≥rio")

    # Cria texto linha a linha com os dados da an√°lise
    texto_materiais = "\n".join([
        f"- {row['Material']}: {row['Consumo Total (un)']}, {row['Consumo (kg)']}, Res√≠duo: {row['Res√≠duo (kg)']}, CO‚ÇÇ: {row['CO‚ÇÇ (kg)']}"
        for _, row in df.iterrows()
    ])

    resumo = f"""Relat√≥rio - An√°lise de Res√≠duos
Data: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
√Årea analisada: {area:.2f} m¬≤

--- Materiais ---
{texto_materiais}

--- Crit√©rios do Selo Verde ---
- {'‚úÖ' if c1 else '‚ùå'} Nenhum material excedeu o consumo padr√£o
- {'‚úÖ' if c2 else '‚ùå'} Emiss√£o de CO‚ÇÇ por m¬≤ ‚â§ 8 kg (Atual: {total_co2 / area:.2f} kg)
- {'‚úÖ' if c3 else '‚ùå'} M√≠nimo de 70% de reaproveitamento

Resultado final: {'‚úÖ Selo CONCEDIDO' if c1 and c2 and c3 else '‚ùå Selo N√ÉO CONCEDIDO'}
"""

    # Bot√£o para o usu√°rio baixar o relat√≥rio como .txt
    st.download_button("üì• Baixar .txt", data=resumo, file_name="relatorio_residuos.txt", mime="text/plain")

else:
    # Se nenhum material for selecionado, exibe aviso
    st.info("Selecione pelo menos um material para continuar.")
